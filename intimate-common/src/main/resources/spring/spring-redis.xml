<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
    <!-- 加载配置属性文件 -->
<!--    <context:property-placeholder ignore-unresolvable="true" location="classpath:properties/redis.properties" />-->

    <!-- 缓存注解开启 -->
<!--    <cache:annotation-driven cache-manager="redisCacheManager" key-generator="keyGenerator"/>-->

<!--    扫描包-->
<!--    <context:component-scan base-package="com.intimate.common.redis"/>-->

<!--    &lt;!&ndash; Jedis配置 &ndash;&gt;-->
<!--    <bean id="jedisPoolConfig"-->
<!--          class="redis.clients.jedis.JedisPoolConfig">-->
<!--        &lt;!&ndash; 最大连接数 &ndash;&gt;-->
<!--        <property name="maxTotal" value="30" />-->
<!--        &lt;!&ndash; 最大空闲连接数 &ndash;&gt;-->
<!--        <property name="MaxIdle" value="10" />-->
<!--        &lt;!&ndash; 每次释放连接的最大数目 &ndash;&gt;-->
<!--        <property name="numTestsPerEvictionRun" value="1024" />-->
<!--        &lt;!&ndash; 释放连接的扫描间隔（毫秒） &ndash;&gt;-->
<!--        <property name="timeBetweenEvictionRunsMillis" value="30000" />-->
<!--        &lt;!&ndash; 连接最小空闲时间 &ndash;&gt;-->
<!--        <property name="minEvictableIdleTimeMillis" value="1800000" />-->
<!--        &lt;!&ndash; 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 &ndash;&gt;-->
<!--        <property name="softMinEvictableIdleTimeMillis" value="10000" />-->
<!--        &lt;!&ndash; 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 &ndash;&gt;-->
<!--        <property name="maxWaitMillis" value="1500" />-->
<!--        &lt;!&ndash; 在获取连接的时候检查有效性, 默认false &ndash;&gt;-->
<!--        <property name="testOnBorrow"-->
<!--                  value="true" />-->
<!--        &lt;!&ndash; 在空闲时检查有效性, 默认false &ndash;&gt;-->
<!--        <property name="testWhileIdle"-->
<!--                  value="true" />-->
<!--        &lt;!&ndash; 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true &ndash;&gt;-->
<!--        <property name="blockWhenExhausted"-->
<!--                  value="false" />-->
<!--    </bean>-->
<!--&lt;!&ndash;    redis password &ndash;&gt;-->
<!--&lt;!&ndash;    <bean id="redisPassword" class="org.springframework.data.redis.connection.RedisPassword">&ndash;&gt;-->
<!--&lt;!&ndash;        <constructor-arg name="thePassword" value="hydrogenhoney@root"/>&ndash;&gt;-->
<!--&lt;!&ndash;    </bean>&ndash;&gt;-->

    <!-- Redis集群配置     这里使用的是spring-data-redis  包中内容 -->
    <bean id="redisClusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="maxRedirects" value="6"/>
<!--        集群节点-->
        <property name="clusterNodes">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="139.155.45.210"/>
                    <constructor-arg name="port" value="7001"/>
                </bean>

                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="139.155.8.199"/>
                    <constructor-arg name="port" value="7002"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="139.155.70.76"/>
                    <constructor-arg name="port" value="7003"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="139.155.45.210"/>
                    <constructor-arg name="port" value="7004"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="139.155.8.199"/>
                    <constructor-arg name="port" value="7005"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="139.155.70.76"/>
                    <constructor-arg name="port" value="7006"/>
                </bean>
            </set>

        </property>
<!--        集群链接密码-->

    </bean>



<!--    &lt;!&ndash; Redis连接工厂     &ndash;&gt;-->
<!--    <bean id="redis4CacheConnectionFactory"-->
<!--          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
<!--&lt;!&ndash;        集群配置&ndash;&gt;-->
<!--        <constructor-arg name="clusterConfig" ref="redisClusterConfig" />-->
<!--&lt;!&ndash;        链接池&ndash;&gt;-->
<!--        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>-->
<!--        <property name="password" value="hydrogenhoney@root"/>-->
<!--    </bean>-->
<!--&lt;!&ndash;模板&ndash;&gt;-->
<!--    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
    <!--        <property name="connectionFactory" ref="redis4CacheConnectionFactory" />-->
    <!--    </bean>-->

<!--&lt;!&ndash;    redis操作模版,使用该对象可以操作redis  &ndash;&gt;-->
<!--    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >-->
<!--        <property name="connectionFactory" ref="redis4CacheConnectionFactory" />-->
<!--        &lt;!&ndash;如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  &ndash;&gt;-->
<!--        <property name="keySerializer" >-->
<!--            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
<!--        </property>-->
<!--        <property name="valueSerializer" >-->
<!--            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />-->
<!--        </property>-->
<!--        <property name="hashKeySerializer">-->
<!--            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
<!--        </property>-->
<!--        <property name="hashValueSerializer">-->
<!--            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>-->
<!--        </property>-->
<!--        &lt;!&ndash;开启事务  &ndash;&gt;-->
<!--        <property name="enableTransactionSupport" value="true"/>-->
<!--    </bean >-->

<!--    &lt;!&ndash; 配置RedisCacheManager &ndash;&gt;-->
<!--    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">-->
<!--        <constructor-arg name=""-->
<!--        <constructor-arg name="redisOperations" ref="redisTemplate" />-->
<!--        <property name="defaultExpiration" value="3000" />-->
<!--    </bean>-->
    <!-- 下面就需要自己去写java类去实现 -->
    <!-- 配置RedisCacheConfig -->
<!--    <bean id="redisCacheConfig" class="com.intimate.common.redis.RedisCacheConfig">-->
<!--        <constructor-arg ref="redis4CacheConnectionFactory"/>-->
<!--        <constructor-arg ref="redisTemplate"/>-->
<!--&lt;!&ndash;        <constructor-arg ref="redisCacheManager"/>&ndash;&gt;-->
<!--    </bean>-->

<!--    &lt;!&ndash;自定义redis工具类,在需要缓存的地方注入此类  &ndash;&gt;-->
<!--    <bean id="redisUtil" class="com.intimate.common.redis.RedisUtil">-->
<!--        <property name="redisTemplate" ref="redisTemplate" />-->
<!--    </bean>-->


    <!-- redis连接池配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
        <property name="testOnReturn" value="${redis.testOnReturn}"/>
    </bean>

    <!-- redis连接工厂 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="jedisPoolConfig"/>

        <constructor-arg name="clusterConfig" ref="redisClusterConfig"/>

        <property name="password" value="${redis.password}"/>
        <property name="timeout" value="${redis.timeout}"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>

        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>

        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
    </bean>

    <!-- 缓存拦截器配置 -->
    <bean id="methodCacheInterceptor" class="com.intimate.common.interceptor.MethodCacheInterceptor">
        <property name="redisUtil" ref="redisUtil"/>
        <property name="defaultCacheExpireTime" value="${defaultCacheExpireTime}"/>
        <!-- 禁用缓存的类名列表 -->
        <property name="targetNamesList">
            <list>
                <value></value>
            </list>
        </property>

        <!-- 禁用缓存的方法名列表 -->
        <property name="methodNamesList">
            <list>
                <value></value>
            </list>
        </property>
    </bean>

    <bean id="redisUtil" class="com.intimate.common.redis.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>

<!--    &lt;!&ndash;配置切面拦截方法 &ndash;&gt;-->
<!--    <aop:config proxy-target-class="true">-->
<!--        <aop:pointcut id="controllerMethodPointcut" expression="execution(* com.ssm.service.impl.*.list*(..))"/>-->
<!--        <aop:advisor advice-ref="methodCacheInterceptor" pointcut-ref="controllerMethodPointcut"/>-->
<!--    </aop:config>-->
</beans>
